# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI/CD with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      working-directory: server
      run: mvn -B package -DskipTests
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
    #  with:
    #    directory: server
    - name: Prepare artifact for deployment
      working-directory: server
      run: | 
        mkdir -p staging
        cp target/*.jar staging/
    - name: Upload application package
      uses: actions/upload-artifact@v4
      with:
        name: mentara-server-package
        path: server/staging
        retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    concurrency:
      group: production
      cancel-in-progress: true
    
    steps:
      - name: Download Application Package
        uses: actions/download-artifact@v4
        with:
          name: mentara-server-package
          path: /tmp/artifact_download
      - name: Securely Copy JAR to ECS Temp Dir
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: "/tmp/artifact_download/mentara-server-1.0.0.jar"
          target: "/"
      - name: Deploy to ECS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            TARGET_DIR=/root/Mentara/server/target
            JAR_PATH=/tmp/artifact_download/mentara-server-1.0.0.jar
            echo "Starting deployment..."
            
            # 1. 停止服务
            sudo systemctl stop mentara-backend.service
            
            # 2. 备份旧 JAR 并部署新 JAR
            cp $JAR_PATH $TARGET_DIR/mentara-server.jar
            sudo chmod 755 $TARGET_DIR/mentara-server.jar

            # 3. 启动服务
            sudo systemctl start mentara-backend.service
            
            # 4. 状态检查 (核心改进)
            echo "Waiting 10 seconds for service to stabilize..."
            sleep 20 # 给予 Spring Boot 足够时间来启动或抛出错误
            
            # 使用 systemctl is-active 检查服务状态
            if sudo systemctl is-active --quiet mentara-backend.service; then
                echo "✅ Deployment SUCCESS: Service is Running."
            else
                echo "❌ Deployment FAILED: Service failed to start or is not active."
                echo "Please check logs with: sudo journalctl -u mentara-backend.service -e"
                exit 1
            fi


